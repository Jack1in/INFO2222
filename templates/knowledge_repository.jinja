{% extends 'base.jinja' %}

{% block content %}
<style>

    .user-info-text {
        color: black;
    }

    /* Dark mode */
    .dark-mode .user-info-text {
        color: white;
    }


    #postArticleModal, #editArticleModal {
        display: none;
        position: fixed;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        padding: 20px;
        border: 1px solid black;
        background-color: white;
        width: 50%;
        height: 60%;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        border-radius: 10px;
        overflow: auto;
    }

    .modal-header, .modal-footer {
        padding: 10px;
        background-color: #f1f1f1;
        border-bottom: 1px solid #ddd;
    }

    .modal-footer {
        border-top: 1px solid #ddd;
        border-bottom: none;
    }

    .modal-content {
        padding: 20px;
        text-align: center;
    }

    .container {
        display: flex;
        height: calc(100vh);
    }

    .left-panel {
        width: 25%;
        padding: 10px;
        border-right: 1px solid #ccc;
        overflow-y: auto;
        max-height: 100vh;
    }

    .right-panel {
        width: 75%;
        padding: 10px;
        overflow-y: auto;
        max-height: 100vh;
    }

    .article-container {
        border: 2px solid #007BFF;
        padding: 15px;
        margin: 10px 0;
        background-color: #f9f9f9;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s, border-color 0.3s;
    }

    .article-container:hover {
        background-color: #e0e0e0;
        border-color: #0056b3;
    }

    .article-title {
        font-size: 1.2em;
        font-weight: bold;
        color: black;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .article-author {
        font-size: 0.9em;
        color: #555;
    }

    .article-details-container {
        background-color: white;
        color: black;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border: 3px solid #000;
    }

    .article-details {
        font-size: 1em;
        color: black;
        word-wrap: break-word;
        white-space: pre-wrap;
        display: flex;
        flex-direction: column;
    }

    .article-details-title {
        font-size: 1.5em;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .article-details-author {
        font-size: 1.1em;
        color: #555;
        margin-bottom: 15px;
    }

    .article-details-content {
        margin-bottom: 20px; /* Add margin at the bottom to separate from buttons */
    }

    .input-field {
        width: 90%;
        padding: 10px;
        margin: 10px auto;
        box-sizing: border-box;
        display: block;
        border: 3px solid black;
        word-wrap: break-word;
    }

    textarea.input-field {
        height: 150px;
        resize: vertical;
        border: 3px solid black;
        word-wrap: break-word;
        white-space: pre-wrap;
    }

    .comment-container {
        border-top: 1px solid #ccc;
        padding: 10px 0;
        word-wrap: break-word;
        white-space: pre-wrap;
    }

    .comment-author {
        font-weight: bold;
    }

    .comment-content {
        margin-left: 10px;
        word-wrap: break-word;
        white-space: pre-wrap;
    }

    nav {
        border-bottom: 1px solid white;
        overflow: auto;
        background-color: #ffffff;
        padding: 10px 0;
        color: black;
    }

    nav.dark-mode {
        border-bottom: 1px solid #121212;
        background-color: #121212;
        color: white;
    }

    .dark-mode-button {
        position: absolute;
        top: 10px;
        left: 10px;
        padding: 10px 20px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
    }

    .dark-mode-button:hover {
        background-color: #45a049;
    }

    .custom-button {
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        padding: 10px 20px;
    }

    .custom-button:hover {
        background-color: #45a049;
    }

    .home-button {
        position: absolute;
        top: 10px;
        left: 200px;
        width: 180px;
    }

    .user-info {
        position: absolute;
        top: 10px;
        right: 10px;
        display: flex;
        align-items: center;
    }

    .user-info span {
        margin-right: 10px;
        font-size: 16px;
        color: black;
    }

    .user-info button {
        margin-left: 10px;
    }

    .post-article-button {
        width: 100%; 
    }

    .modify-button {
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        padding: 5px 10px;
        margin-right: 10px; /* Add margin to the right for spacing */
    }
    
    .modify-button:hover {
        background-color: #45a049;
    }
    
    .delete-button {
        background-color: #FF5733;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        padding: 5px 10px;
    }
    
    .delete-button:hover {
        background-color: #C70039;
    }
    
    .button-container {
        display: flex;
        align-items: center;
        margin-bottom: 15px; /* Add margin at the bottom to separate from content */
    }

    .delete-comment-button {
        background-color: #FF5733;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        padding: 5px 10px;
        float: right;
        margin-top: 10px; 
    }
    
    .delete-comment-button:hover {
        background-color: #C70039;
    }

    .always-black {
        color: black;
    }
    
    /* Ensure checkbox remains black */
    .always-black input[type="checkbox"] {
        color: black;
    }


</style>
</head>
<body>
    <nav>
        <button class="custom-button home-button" onclick="window.location.href='{{ url_for('home', username=request.args.get('username'), sessionKey=request.args.get('sessionKey'), role=request.args.get('role')) }}'">Home Page</button>
        {% if request.args.get('role') == 'admin' %}
            <button class="custom-button home-button" style="left: 390px;" onclick="window.location.href='{{ url_for('user_management', username=request.args.get('username'), sessionKey=request.args.get('sessionKey'), role=request.args.get('role')) }}'">User Management</button>
        {% endif %}
        <div class="user-info">
            <span class="user-info-text">Username: {{ username|escape }} Role: {{ request.args.get('role')|escape }}</span>
            <button class="custom-button" onclick="logout()">Logout</button>
        </div>
        
    </nav>
    
    

<h1>Knowledge Repository</h1>

<main class="container">
    <section class="left-panel" id="articles">
        <h2>Articles</h2>
        <button class="custom-button post-article-button" id="postArticleBtn">Post Article</button>

        <div id="postArticleModal">
            <div class="modal-header">
                <h3>Post a New Article</h3>
            </div>
            <div class="modal-content">
                <p>Title:</p>
                <input type="text" id="articleTitle" class="input-field" placeholder="Enter the title">
                <p>Content:</p>
                <textarea id="articleContent" class="input-field" placeholder="Write your article here..."></textarea>
                <label class="always-black">
                    <input type="checkbox" id="anonymousCheck"> Post Anonymously
                </label>
                
            </div>
            <div class="modal-footer">
                <button class="custom-button" onclick="postArticle()">Submit</button>
                <button class="custom-button" onclick="closeModal()">Cancel</button>
            </div>
        </div>

        <div id="articles_list"></div>
    </section>

    <section class="right-panel">
        <h2>Article Details</h2>
        <div id="article_details" class="article-details-container">
            <div class="article-details"></div>
        </div>
        <h3>Comments</h3>
        <div id="comments_list"></div>
        <textarea id="commentContent" class="input-field" placeholder="Write your comment here..."></textarea>
        <button class="custom-button" onclick="postComment()">Post Comment</button>
    </section>
</main>

<div id="editArticleModal">
    <div class="modal-header">
        <h3>Edit Article</h3>
    </div>
    <div class="modal-content">
        <p>Title:</p>
        <input type="text" id="editArticleTitle" class="input-field" placeholder="Enter the title">
        <p>Content:</p>
        <textarea id="editArticleContent" class="input-field" placeholder="Write your article here..."></textarea>
    </div>
    <div class="modal-footer">
        <button class="custom-button" onclick="updateArticle()">Update</button>
        <button class="custom-button" onclick="closeEditModal()">Cancel</button>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="/static/js/libs/js.cookie.min.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function() {
        function openModal() {
            document.getElementById('postArticleModal').style.display = 'block';
        }

        function closeModal() {
            document.getElementById('postArticleModal').style.display = 'none';
        }

        function openEditModal() {
            document.getElementById('editArticleModal').style.display = 'block';
        }

        function closeEditModal() {
            document.getElementById('editArticleModal').style.display = 'none';
        }

        document.getElementById('postArticleBtn').onclick = openModal;

        async function postArticle() {
            const articleTitle = document.getElementById("articleTitle").value;
            const articleContent = document.getElementById("articleContent").value;
            const anonymous = document.getElementById("anonymousCheck").checked;
            const username = "{{ request.args.get('username') }}";
            const sessionKey = "{{ request.args.get('sessionKey') }}";
        
            if (!articleTitle || !articleContent) {
                alert("Title and content cannot be empty!");
                return;
            }
        
            try {
                const response = await fetch("{{ url_for('post_article') }}", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        username: username,
                        sessionKey: sessionKey,
                        title: articleTitle,
                        content: articleContent,
                        anonymous: anonymous,
                    }),
                });
        
                if (response.ok) {
                    alert("Article posted successfully!");
                    closeModal();
                    loadArticles();
                } else {
                    const errorResponse = await response.json();
                    const errorMessage = errorResponse.error || "Unknown error occurred.";
                    console.error("Failed to post article:", errorMessage);
                    alert("Failed to post article. " + errorMessage);
                }
            } catch (error) {
                console.error("Error posting article:", error);
                alert("An error occurred while posting the article.");
            }
        }
        
        

        async function loadArticles() {
            try {
                const response = await fetch("{{ url_for('get_articles') }}");
                if (response.ok) {
                    const articles = await response.json();
                    const articlesList = document.getElementById('articles_list');
                    articlesList.innerHTML = '';
        
                    if (articles.length === 0) {
                        articlesList.innerHTML = '<p>No articles available.</p>';
                        return;
                    }
        
                    articles.forEach(article => {
                        const authorName = article.anonymous ? "Anonymous" : article.username;
                        const articleItem = document.createElement('div');
                        articleItem.className = 'article-container';
                        articleItem.onclick = () => viewArticle(article);
                        articleItem.innerHTML = `
                            <div class="article-title">${article.title}</div>
                            <div class="article-author">by ${authorName} (${article.role})</div>  <!-- Display role -->
                        `;
                        articlesList.appendChild(articleItem);
                    });
        
                    // Automatically view the first article if articles exist
                    if (articles.length > 0) {
                        viewArticle(articles[0]);
                    }
                } else {
                    console.error("Failed to load articles.");
                }
            } catch (error) {
                console.error("Error loading articles:", error);
            }
        }
        
        

        function escapeHTML(str) {
            const div = document.createElement('div');
            div.textContent = str;
            return div.innerHTML;
        }
        
        function viewArticle(article) {
            const articleDetails = document.querySelector('.article-details');
            articleDetails.dataset.title = escapeHTML(article.title);
            articleDetails.dataset.username = escapeHTML(article.username);
            articleDetails.dataset.anonymous = article.anonymous;
        
            const authorName = article.anonymous ? "Anonymous" : escapeHTML(article.username);
        
            articleDetails.innerHTML = `
                <div class="article-details-title">${escapeHTML(article.title)}</div>
                <div class="article-details-author">by ${authorName} (${escapeHTML(article.role)})</div>
                <div class="article-details-content">${escapeHTML(article.content)}</div>
            `;
        
            const currentUsername = "{{ request.args.get('username') }}";
            const userRole = "{{ request.args.get('role') }}";
        
            if (article.username === currentUsername || userRole === "admin" || userRole === "academics") {
                articleDetails.innerHTML += `
                    <div class="button-container">
                        <button class="modify-button" onclick="editArticle('${escapeHTML(article.title)}', '${escapeHTML(article.username)}', '${escapeHTML(article.content)}', ${article.anonymous})">Modify</button>
                        <button class="delete-button" onclick="deleteArticle('${escapeHTML(article.title)}', '${escapeHTML(article.username)}')">Delete</button>
                    </div>
                `;
            }
        
            loadComments(article.title, article.username);
        }
        
        
        
        function editArticle(oldTitle, oldUsername, content, anonymous) {
            document.getElementById('editArticleTitle').value = oldTitle;
            document.getElementById('editArticleContent').value = content;
            document.getElementById('editArticleModal').dataset.oldTitle = oldTitle;
            document.getElementById('editArticleModal').dataset.oldUsername = oldUsername;
            document.getElementById('editArticleModal').dataset.anonymous = anonymous;
            openEditModal();
        }
        
        
        async function updateArticle() {
            const articleTitle = document.getElementById('editArticleTitle').value;
            const articleContent = document.getElementById('editArticleContent').value;
            const oldTitle = document.getElementById('editArticleModal').dataset.oldTitle;
            const oldUsername = document.getElementById('editArticleModal').dataset.oldUsername;
            const anonymous = document.getElementById('editArticleModal').dataset.anonymous === "true";  // Ensure it's a boolean
            const username = "{{ request.args.get('username') }}";
            const sessionKey = "{{ request.args.get('sessionKey') }}";
        
            if (!articleTitle || !articleContent) {
                alert("Title and content cannot be empty!");
                return;
            }
        
            try {
                const response = await fetch("{{ url_for('update_article') }}", {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        username: username,
                        sessionKey: sessionKey,
                        oldTitle: oldTitle,
                        oldUsername: oldUsername,
                        title: articleTitle,
                        content: articleContent,
                        anonymous: anonymous,
                    }),
                });
        
                if (response.ok) {
                    alert("Article updated successfully!");
                    closeEditModal();
                    loadArticles().then(() => {
                        viewArticle({
                            title: articleTitle,
                            username: oldUsername,
                            content: articleContent,
                            anonymous: anonymous
                        });
                    });
                } else {
                    const errorText = await response.text();
                    console.error("Failed to update article:", errorText);
                    alert("Failed to update article." + errorText);
                }
            } catch (error) {
                console.error("Error updating article:", error);
                alert("An error occurred while updating the article.");
            }
        }
        
        
        

        async function deleteArticle(title, articleUsername) {
            const username = "{{ request.args.get('username') }}";
            const sessionKey = "{{ request.args.get('sessionKey') }}";

            if (!confirm("Are you sure you want to delete this article?")) {
                return;
            }

            try {
                const response = await fetch("{{ url_for('delete_article') }}", {
                    method: "DELETE",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        username: username,
                        sessionKey: sessionKey,
                        title: title,
                        articleUsername: articleUsername
                    }),
                });

                if (response.ok) {
                    const result = await response.json();
                    alert("Article deleted successfully!");
                    loadArticles();
                } else {
                    const errorText = await response.text();
                    console.error("Failed to delete article:", errorText);
                    alert("Failed to delete article." + errorText);
                }
            } catch (error) {
                console.error("Error deleting article:", error);
                alert("An error occurred while deleting the article.");
            }
        }

        async function postComment() {
            const commentContent = escapeHTML(document.getElementById('commentContent').value);
            const articleTitle = document.querySelector('.article-details').dataset.title;
            const articleUsername = document.querySelector('.article-details').dataset.username;
            const username = "{{ request.args.get('username') }}";
            const sessionKey = "{{ request.args.get('sessionKey') }}";
            const commentPublisher = username;
        
            if (!commentContent) {
                alert("Comment cannot be empty!");
                return;
            }
        
            try {
                const response = await fetch("{{ url_for('post_comment') }}", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        username: username,
                        sessionKey: sessionKey,
                        articleTitle: escapeHTML(articleTitle),
                        articleUsername: escapeHTML(articleUsername),
                        content: commentContent,
                        commentPublisher: commentPublisher
                    }),
                });
        
                if (response.ok) {
                    const result = await response.json();
                    alert("Comment posted successfully!");
                    document.getElementById('commentContent').value = '';
                    loadComments(articleTitle, articleUsername);
                } else {
                    const errorText = await response.text();
                    console.error("Failed to post comment:", errorText);
                    alert("Failed to post comment." + errorText);
                }
            } catch (error) {
                console.error("Error posting comment:", error);
                alert("An error occurred while posting the comment.");
            }
        }
        

        async function loadComments(title, username) {
            try {
                const response = await fetch("{{ url_for('get_comments') }}", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        title: title,
                        username: username
                    })
                });
                if (response.ok) {
                    const comments = await response.json();
                    const commentsList = document.getElementById('comments_list');
                    commentsList.innerHTML = '';

                    comments.forEach(comment => {
                        const commentItem = document.createElement('div');
                        commentItem.className = 'comment-container';
                        commentItem.innerHTML = `
                        <div class="comment-author">${comment.username} (${comment.role}):</div>  <!-- Display role -->
                            <pre class="comment-content">${comment.content}</pre>
                        `;
                        if (comment.username === "{{ request.args.get('username') }}" || "{{ request.args.get('role') }}" === "admin" || "{{ request.args.get('role') }}" === "administrative staff") {
                            commentItem.innerHTML += `
                            <button class="delete-comment-button" onclick="deleteComment('${comment.article_title}', '${comment.article_username}', '${comment.username}', '${comment.content}')">Delete Comment</button>
                            `;
                        }
                        commentsList.appendChild(commentItem);
                    });
                } else {
                    console.error("Failed to load comments.");
                }
            } catch (error) {
                console.error("Error loading comments:", error);
            }
        }

        async function deleteComment(articleTitle, articleUsername, commentPublisher, content) {
            const username = "{{ request.args.get('username') }}";
            const sessionKey = "{{ request.args.get('sessionKey') }}";

            if (!confirm("Are you sure you want to delete this comment?")) {
                return;
            }

            try {
                const response = await fetch("{{ url_for('delete_comment') }}", {
                    method: "DELETE",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        username: username,
                        sessionKey: sessionKey,
                        articleTitle: articleTitle,
                        articleUsername: articleUsername,
                        commentPublisher: commentPublisher,
                        content: content
                    }),
                });

                if (response.ok) {
                    const result = await response.json();
                    alert("Comment deleted successfully!");
                    loadComments(articleTitle, articleUsername);
                } else {
                    const errorText = await response.text();
                    console.error("Failed to delete comment:", errorText);
                    alert("Failed to delete comment." + errorText);
                }
            } catch (error) {
                console.error("Error deleting comment:", error);
                alert("An error occurred while deleting the comment.");
            }
        }

        window.postArticle = postArticle;
        window.closeModal = closeModal;
        window.openEditModal = openEditModal;
        window.closeEditModal = closeEditModal;
        window.viewArticle = viewArticle;
        window.editArticle = editArticle;
        window.updateArticle = updateArticle;
        window.deleteArticle = deleteArticle;
        window.postComment = postComment;
        window.loadComments = loadComments;
        window.deleteComment = deleteComment;

        loadArticles();
    });
    function logout() {
        const username = "{{ username|escape }}";
        const data = { username: username };
    
        fetch('/logout', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        }).then(response => {
            if (response.ok) {
                Cookies.remove("username");
                Cookies.remove("sessionKey");  // Ensure sessionKey is removed
                window.location.href = "{{ url_for('login') }}";
            } else {
                alert('Logout failed');
            }
        }).catch(error => {
            console.error('Error:', error);
            alert('Logout failed');
        });
    }
    function changeRole(username) {
        let newRole = document.getElementById(`role-select-${username}`).value;
        let sessionKey = "{{ sessionKey }}";

        $.ajax({
            url: "/change_role",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({ targetUser: username, newRole: newRole, sessionKey: sessionKey }),
            success: function(response) {
                alert(response.message);
            },
            error: function(xhr, status, error) {
                alert("Error changing role: " + xhr.responseText);
            }
        });
    }
</script>
{% endblock %}
