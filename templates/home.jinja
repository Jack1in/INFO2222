{% extends 'base.jinja' %}

{% block content %}
<style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto;
    }

    #message_box {
        border: 1px solid black;
        height: 400px;
        width: 800px;
        overflow: auto;
        padding: 2px;
    }

    .text {
        margin-top: 2px;
        margin-bottom: 2px;
    }
</style>

<!-- Navbar, displaying the username and friend functionalities -->
<nav>
    <ol style="float: right">
        <li style="display:inline-block">Username: {{ username|escape }}</li>
    </ol>
    <ul style="float: left">
        <li><strong>Friend Requests:</strong>
            {% if friend_requests %}
                <ul>
                    {% for request in friend_requests %}
                        <li id="request-{{ request.username }}">{{ request.username|escape}}
                            <button onclick="acceptRequest('{{ request.username|escape }}')">Accept</button>
                            <button onclick="rejectRequest('{{ request.username|escape }}')">Reject</button>
                        </li>
                    {% endfor %}
                </ul>
            {% else %}
                <p>No friend requests.</p>
            {% endif %}
        </li>
        <li><strong>Friends List:</strong>
            <ul id="friends_list">
                {% for friend in friends_list %}
                    <li>{{ friend|escape }}</li>
                {% endfor %}
            </ul>
            {% if not friends_list %}
                <p id="no_friends_msg">No friends yet.</p>
            {% endif %}
        </li>
    </ul>
</nav>

<h1>Messaging App</h1>

<main>
    <!-- The messages are displayed here -->
    <section id="message_box"></section>

    <!-- Chat box for choosing a chat partner -->
    <section id="chat_box">
        <p class="text">Chat with:</p>
        <input id="receiver" placeholder="username">
        <button onclick="join_room()">Chat</button>
    </section>

    <!-- The input box for sending messages, initially hidden -->
    <section id="input_box" style="display: none">
        <p class="text">Message:</p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
    </section>

    <!-- Friend request box for adding new friends -->
    <section id="friend_request_box">
        <p class="text">Add Friend:</p>
        <input id="friend_username" placeholder="Enter friend's username">
        <button onclick="send_friend_request()">Send Friend Request</button>
    </section>
</main>

<script src="https://cdn.jsdelivr.net/npm/node-forge/dist/forge.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/crypto-js/crypto-js.js"></script>
<script src="/static/js/libs/socket.io.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="/static/js/libs/js.cookie.min.js"></script>
<script>
    let privateKey;
    async function initialize() {
        let username = "{{ username|escape}}";
        try {
            privateKey = await getPrivateKey(username);
        } catch (error) {
            console.error('Failed to get private key:', error);
            return;
        }
    }

    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    });

    $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    });

    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        initialize();
        if (Cookies.get("room_id") == undefined) {
            return;
        }
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    });

    let username = "{{ username|escape}}";
    Cookies.set('username', username);
    
    const socket = io();

    // normal incoming message event
    socket.on("incoming", (msg, color="black") => {
        add_message(msg, color);
    });

    // normal incoming message event
    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming_message", async (data, color = "black") => {
        
        const parts = data.split(": ");
        if (parts.length < 3) {
            console.error("Received malformed message.");
            return;
        }

        const sender = parts[0];
        const encryptedMsg = parts[1];
        const signature = parts[2];
        decryptedMessage = await decryptMessage(privateKey, encryptedMsg);

        // verify the signature of the message
        const hash = forge.md.sha256.create();
        hash.update(decryptedMessage, 'utf8');
        const messageHash = hash.digest().toHex();

        const publicKey_sender = await fetchPublicKey(sender);
        const isValidSignature = await verifySignature(publicKey_sender, messageHash, signature);
        
        if (!isValidSignature) {
            console.error("Signature verification failed.");
            return; // Optionally handle this case visibly to the user
        }

        // make the message as sender_name: message
        decryptedMessage = `${sender}: ${decryptedMessage}`;
        add_message(decryptedMessage, color);
    });

    
    // Modified send function to encrypt message before sending
    async function send() {
        let message = $("#message").val();
        $("#message").val("");
        let local_message = `${username}: ${message}`;
        add_message(local_message, "blue");
        const sender = username;
        const receiver = $("#receiver").val();

        // Encryption of the message
        const publicKey_receiver = await fetchPublicKey(receiver);  // Fetch the receiver's public key from server
        const publicKey_sender = await fetchPublicKey(sender);  // Fetch the sender's public key from server
        const encryptedMessage = await encryptMessage(publicKey_receiver, message);
        const encryptedMessage_sender = await encryptMessage(publicKey_sender, message);

        // Signature of the message
        const hash = forge.md.sha256.create();
        hash.update(message, 'utf8');
        const messageHash = hash.digest().toHex();
        const signature = await signMessage(privateKey, messageHash);

        socket.emit("send", username, encryptedMessage,encryptedMessage_sender,signature,room_id);
    };

    // Function to fetch public key from server
    async function fetchPublicKey(receiver) {
        try {
            const response = await axios.get(`/api/public-keys/${receiver}`);
            return response.data.publicKey;  // Assuming the server sends back the public key directly
        } catch (error) {
            console.error('Failed to fetch public key:', error);
            return null;
        }
    };

    async function loadAndDisplayMessages(username, chatPartner) {
        try {
            // load password from local storage
            const password = localStorage.getItem(username + "_password");
            console.log(username + "_password")
            // Hash the password
            console.log("password in load: ", password);
            const hashedPassword = CryptoJS.SHA256(password).toString();
            console.log("hashedPassword in load: ", hashedPassword);
            const requestData = {
                username: username,
                chatPartner: chatPartner,
                hashedPassword: hashedPassword
            };

            const response = await fetch("/request_history", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(requestData)
            });

            if (!response.ok || response.status !== 200) {
                console.log('No existing messages or failed to load messages.');
                return; // Exit the function if there's no messages or an error occurred
            }

            const messages = await response.json();
            user_public_key = await fetchPublicKey(username);
            chatPartner_public_key = await fetchPublicKey(chatPartner);
            for (const message of messages) {
                const decryptedMessage = await decryptMessage(privateKey, message.message);
                if (username == message.username){
                    // verify the signature of the message
                    const hash = forge.md.sha256.create();
                    hash.update(decryptedMessage, 'utf8');
                    const messageHash = hash.digest().toHex();
                    const isValidSignature = await verifySignature(user_public_key, messageHash, message.signature);
                    if (!isValidSignature) {
                        console.error("Signature verification failed.");
                        return; // Optionally handle this case visibly to the user
                    } 
                    add_message(`${message.username}: ${decryptedMessage}`, "blue");
                }
                else{
                    // verify the signature of the message
                    const hash = forge.md.sha256.create();
                    hash.update(decryptedMessage, 'utf8');
                    const messageHash = hash.digest().toHex();
                    const isValidSignature = await verifySignature(chatPartner_public_key, messageHash, message.signature);
                    if (!isValidSignature) {
                        console.error("Signature verification failed.");
                        return; // Optionally handle this case visibly to the user
                    } 
                    add_message(`${message.username}: ${decryptedMessage}`, "black");
                
                }
            }
        } catch (error) {
            console.error('Error loading or decrypting messages:', error);
        }
    };


    function join_room() {
        let receiver = $("#receiver").val();
        // remove everything in chat box
        $("#message_box").empty();
        socket.emit("join", username, receiver, (res) => {
            if (typeof res != "number") {
                alert(res);
                return;
            }
            room_id = res;
            Cookies.set("room_id", room_id);
            $("#chat_box").hide();
            $("#input_box").show();
            loadAndDisplayMessages(username, receiver);
        });
    };

    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    };

    function add_message(message, color) {
        let box = document.getElementById("message_box");
        let child = document.createElement("p");
        child.style.color = color;
        child.textContent = message;
        box.appendChild(child);
    };

    // function to encrypt a message
    async function encryptMessage(publicKeyPem, message) {
        try{
            const publicKey = forge.pki.publicKeyFromPem(publicKeyPem);
            const buffer = forge.util.createBuffer(message, 'utf8');
            const encrypted = publicKey.encrypt(buffer.getBytes(), 'RSA-OAEP');
            return forge.util.encode64(encrypted);
        }catch(error){
            console.log("error caused by encryptMessage");
            throw error;
        }
    };

    // function to decrypt a message
    async function decryptMessage(privateKeyPem, encryptedMessageBase64) {
        try{
            const privateKey = forge.pki.privateKeyFromPem(privateKeyPem);
            const encrypted = forge.util.decode64(encryptedMessageBase64);
            const decrypted = privateKey.decrypt(encrypted, 'RSA-OAEP');
            return decrypted;
        }catch(error){
            console.log("error caused by decryptMessage");
            throw error;
        }
    };

    async function signMessage(privateKeyPem, messageHash) {
        const privateKey = forge.pki.privateKeyFromPem(privateKeyPem);
        const signature = privateKey.sign(forge.md.sha256.create().update(messageHash, 'utf8'));
        return forge.util.encode64(signature);
    }

    async function verifySignature(publicKeyPem, messageHash, signature) {
        const publicKey = forge.pki.publicKeyFromPem(publicKeyPem);
        const signatureBytes = forge.util.decode64(signature);
        return publicKey.verify(forge.md.sha256.create().update(messageHash, 'utf8').digest().getBytes(), signatureBytes);
    }

    function getPrivateKey(username) {
        // Attempt to retrieve the private key from localStorage
        const privateKey = localStorage.getItem(username + "_privateKey");
        console.log(username + "_privateKey");
        if (privateKey) {
            console.log("Private key retrieved successfully.", privateKey);
            return privateKey; // Return the private key
        } else {
            console.log("No private key found.");
            return null; // No private key found
        }
    }

    
function send_friend_request() {
    let friend_username = $("#friend_username").val();
    $.ajax({
        url: "/send_request",
        type: "POST",
        contentType: "application/json",
        data: JSON.stringify({ sender: "{{ username|escape }}", receiver: friend_username }),
        success: function(response) {
            alert("Request status: " + response.result);
        },
        error: function() {
            alert("Failed to send friend request.");
        }
    });
}

function acceptRequest(requestUsername) {
    $.ajax({
        url: "/accept_friend_request",
        type: "POST",
        contentType: "application/json",
        data: JSON.stringify({ sender: requestUsername, receiver: "{{ username|escape }}"}),
        success: function(response) {
            if (response.result === "Friend added successfully.") {
                let friendsList = document.getElementById('friends_list');
                let newFriend = document.createElement('li');
                newFriend.textContent = requestUsername; 
                friendsList.appendChild(newFriend);
                if (friendsList.children.length === 1) {
                    let noFriendsMsg = document.getElementById('no_friends_msg');
                    if (noFriendsMsg) noFriendsMsg.parentNode.removeChild(noFriendsMsg);
                }
                let requestItem = document.getElementById(`request-${requestUsername}`);
                if (requestItem) requestItem.parentNode.removeChild(requestItem);
                alert("Friend request accepted.");
            } else {
                alert(response.result);
            }
        },
        error: function() {
            alert("Error processing request.");
        }
    });
}

    function rejectRequest(requestUsername) {
        $.ajax({
            url: "/reject_friend_request",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({ sender: requestUsername, receiver: "{{ username|escape }}"}),
            success: function(response) {
                if (response.result === "Friend request rejected.") {
                    $(`#request-${requestUsername}`).remove();
                    alert("Friend request rejected.");
                } else {
                    alert(response.result);
                }
            },
            error: function() {
                alert("Error processing request.");
            }
        });
    }

</script>
{% endblock %}
