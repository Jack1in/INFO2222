{% extends 'base.jinja' %}

{% block content %}
<style>
    body {
        font-family: Arial, sans-serif;
    }

    
    nav {
        border-bottom: 1px solid black;
        overflow: auto;
    }

    .tabs {
        margin-top: 20px;
        display: flex;
        justify-content: center; 
        gap: 1px;
    }

    nav.dark-mode {
        border-bottom: 1px solid #121212;
        background-color: #121212;
        color: white;
    }
    
    .dark-mode-button {
        position: fixed;
        TOP: 800px;
        right: 10px;
        padding: 10px 20px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
    }
    
    .dark-mode-button:hover {
        background-color: #45a049;
    }
    
    

    .tabs button {
        padding: 15px 30px; 
        font-size: 18px; 
        background-color: #4c8bf5; 
        color: white; 
        border: none;
        border-radius: 0; 
        cursor: pointer;
        flex: 1;
    }

    .tabs button + button {
        border-left: 1px solid white; 
    }

    .main-content {
        display: flex;
        justify-content: center;
        padding: 20px;
    }

    .friends-list {
        width: 200px;
        border-right: 1px solid black;
        padding: 10px;
        box-sizing: border-box;
    }

    .articles-list {
        flex: 1;
        padding: 10px;
        box-sizing: border-box;
    }

    .article-container {
        margin-bottom: 20px;
        padding: 10px;
        border: 1px solid #ccc;
    }

    .article-title {
        font-size: 20px;
        font-weight: bold;
    }

    .article-author {
        font-size: 14px;
        color: #777;
    }

    .text {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    .footer {
        margin-top: auto;
        padding: 10px;
        border-top: 1px solid black;
        text-align: center;
    }
</style>

<!-- Navbar, displaying the username and friend functionalities -->
<nav>
    <ol style="float: right">
        <li style="display:inline-block">Username: {{ username|escape }}</li>
        <li style="display:inline-block" id="user-role">Role: {{ role|escape }}</li>
        <li style="display:inline-block"><button onclick="logout()">Logout</button></li>
    </ol>
    <div class="tabs">
        <button style="background-color: #a2bff0;">Home</button>
        <button onclick="window.location.href='{{ url_for('chat', username=username, sessionKey=sessionKey,role=role) }}'">Chat With Friends</button>
        <button onclick="window.location.href='{{ url_for('knowledge_repository', username=username, sessionKey=sessionKey,role=role) }}'">Public Posts</button>
        <button onclick="window.location.href='{{ url_for('security', username=username, sessionKey=sessionKey,role=role) }}'">Security</button>
        <button onclick="showGuide()">Guide</button>
        {% if role == 'admin' %}
            <button onclick="window.location.href='{{ url_for('user_management', username=username, sessionKey=sessionKey, role=role) }}'">User Management</button>
        {% endif %}
    </div>
</nav>

<div class="main-content">
    <!-- Friends list section -->
    <div class="friends-list">
        <strong>Friend Requests:</strong>
        {% if friend_requests %}
            <ul>
                {% for request in friend_requests %}
                    <li id="request-{{ request.username }}">{{ request.username|escape}}
                        <button onclick="acceptRequest('{{ request.username|escape }}')">Accept</button>
                        <button onclick="rejectRequest('{{ request.username|escape }}')">Reject</button>
                    </li>
                {% endfor %}
            </ul>
        {% else %}
            <p>No friend requests.</p>
        {% endif %}
        
        <strong>Friends List:</strong>
        <ul id="friends_list">
            {% for friend in friends_list %}
                <li id="friend-{{ friend.username }}">
                    {{ friend.username|escape }} - {{ friend.role|escape }} - 
                    {% if friend.online_status %}Online{% else %}Offline{% endif %}
                </li>
            {% endfor %}
        </ul>
        {% if not friends_list %}
            <p id="no_friends_msg">No friends yet.</p>
        {% endif %}
    </div>

    <!-- Articles list section -->
    <div class="articles-list" id="articles_list">
        <!-- Articles will be loaded here -->
    </div>
</div>

<div class="footer">
    <h1>Welcome to ChatConnect</h1>
</div>

<script src="https://cdn.jsdelivr.net/npm/node-forge/dist/forge.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/crypto-js/crypto-js.js"></script>
<script src="/static/js/libs/socket.io.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="/static/js/libs/js.cookie.min.js"></script>
<script>
    let privateKey;
    async function initialize() {
        let username = "{{ username|escape}}";
        try {
            privateKey = await getPrivateKey(username);
            sessionStorage.setItem('loggedIn', 'true'); 
        } catch (error) {
            console.error('Failed to get private key:', error);
            return;
        }
    }

    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    });

    $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    });

    $(document).ready(() => {
        initialize();
        loadArticles();
        if (Cookies.get("room_id") == undefined) {
            return;
        }
        $("#chat_box").hide();
        $("#input_box").show();
    });

    let username = "{{ username|escape}}";
    Cookies.set('username', username);
    
    const socket = io();
    let roomUsers = {};
    let publicKeys = {};

    socket.on("incoming", (msg, color="black") => {
        add_message(msg, color);
    });

    socket.on('role_update', (data) => {
        if (data.username === "{{ username|escape }}") {
            document.getElementById('user-role').innerText = `Role: ${data.role}`;
        }
    });

    socket.on('update_room_users', (users) => {
        roomUsers = users;
        console.log("Updated room users:", roomUsers);
        $("#message_box").empty();
        for (let user of roomUsers) {
            if (user != username)
                loadAndDisplayMessages(username, user);
        }
    });

    socket.on("incoming_message", async (data, color = "black") => {
        const parts = data.split(": ");
        if (parts.length < 3) {
            console.error("Received malformed message.");
            return;
        }

        const sender = parts[0];
        const encryptedMsg = parts[1];
        const signature = parts[2];
        decryptedMessage = await decryptMessage(privateKey, encryptedMsg);

        const hash = forge.md.sha256.create();
        hash.update(decryptedMessage, 'utf8');
        const messageHash = hash.digest().toHex();

        const publicKey_sender = await fetchPublicKey(sender);
        const isValidSignature = await verifySignature(publicKey_sender, messageHash, signature);
        
        if (!isValidSignature) {
            console.error("Signature verification failed.");
            return;
        }

        decryptedMessage = `${sender}: ${decryptedMessage}`;
        add_message(decryptedMessage, color);
    });

    async function send() {
        let message = $("#message").val();
        $("#message").val("");
        let local_message = `${username}: ${message}`;
        add_message(local_message, "blue");
        const sender = username;
        const publicKey_sender = await fetchPublicKey(sender);
        const encryptedMessage_sender = await encryptMessage(publicKey_sender, message);
        for (let user of roomUsers) {
            if (user != sender) {
                const receiver = user;
                const publicKey_receiver = await fetchPublicKey(receiver);
                const encryptedMessage = await encryptMessage(publicKey_receiver, message);

                const hash = forge.md.sha256.create();
                hash.update(message, 'utf8');
                const messageHash = hash.digest().toHex();
                const signature = await signMessage(privateKey, messageHash);

                socket.emit("send", username, user, encryptedMessage, encryptedMessage_sender, signature, room_id);
            }
        }
    };

    async function fetchPublicKey(receiver) {
        try {
            const response = await axios.get(`/api/public-keys/${receiver}`);
            return response.data.publicKey;
        } catch (error) {
            console.error('Failed to fetch public key:', error);
            return null;
        }
    };

    async function loadArticles() {
        try {
            const response = await fetch("{{ url_for('get_articles') }}");
            if (response.ok) {
                const articles = await response.json();
                const articlesList = document.getElementById('articles_list');
                articlesList.innerHTML = '';

                if (articles.length === 0) {
                    articlesList.innerHTML = '<p>No articles available.</p>';
                    return;
                }

                articles.forEach(article => {
                    const authorName = article.anonymous ? "Anonymous" : article.username;
                    const articleItem = document.createElement('div');
                    articleItem.className = 'article-container';
                    // onclick navigate to the "knowledge_repository"
                    articleItem.onclick = function(){
                        window.location.href='{{ url_for('knowledge_repository', username=username, sessionKey=sessionKey) }}'
                    };
                    articleItem.innerHTML = `
                        <div class="article-title">${article.title}</div>
                        <div class="article-author">by ${authorName}</div>
                    `;
                    articlesList.appendChild(articleItem);
                });

            } else {
                console.error("Failed to load articles.");
            }
        } catch (error) {
            console.error("Error loading articles:", error);
        }
    }

    function logout() {
        const username = "{{ username|escape }}";
        const data = { username: username };
        
        fetch('/logout', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        }).then(response => {
            if (response.ok) {
                Cookies.remove("username");
                Cookies.remove("room_id");
                sessionStorage.removeItem('sessionKey');
                window.location.href = "{{ url_for('login') }}";
            } else {
                alert('Logout failed');
            }
        }).catch(error => {
            console.error('Error:', error);
            alert('Logout failed');
        });
    }

    function getPrivateKey(username) {
        const privateKey = localStorage.getItem(username + "_privateKey");
        if (privateKey) {
            console.log("Private key retrieved successfully.");
            return privateKey;
        } else {
            console.log("No private key found.");
            return null;
        }
    }

    function send_friend_request() {
        let friend_username = $("#friend_username").val();
        sessionKey = sessionStorage.getItem('sessionKey');
        $.ajax({
            url: "/send_request",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({ sender: "{{ username|escape }}", receiver: friend_username, sessionKey: sessionKey}),
            success: function(response) {
                alert("Request status: " + response.result);
            },
            error: function() {
                alert("Failed to send friend request.");
            }
        });
    }

    function acceptRequest(requestUsername) {
        let sessionKey = sessionStorage.getItem('sessionKey');
        $.ajax({
            url: "/accept_friend_request",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({ sender: requestUsername, receiver: "{{ username|escape }}", sessionKey: sessionKey}),
            success: function(response) {
                if (response.result === "Friend added successfully.") {
                    let friendsList = document.getElementById('friends_list');
                    let newFriend = document.createElement('li');
                    newFriend.textContent = requestUsername; 
                    friendsList.appendChild(newFriend);
                    if (friendsList.children.length === 1) {
                        let noFriendsMsg = document.getElementById('no_friends_msg');
                        if (noFriendsMsg) noFriendsMsg.parentNode.removeChild(noFriendsMsg);
                    }
                    let requestItem = document.getElementById(`request-${requestUsername}`);
                    if (requestItem) requestItem.parentNode.removeChild(requestItem);
                    alert("Friend request accepted.");
                } else {
                    alert(response.result);
                }
            },
            error: function() {
                alert("Error processing request.");
            }
        });
    }

    function rejectRequest(requestUsername) {
        let sessionKey = sessionStorage.getItem('sessionKey');
        $.ajax({
            url: "/reject_friend_request",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({ sender: requestUsername, receiver: "{{ username|escape }}", sessionKey: sessionKey}),
            success: function(response) {
                if (response.result === "Friend request rejected.") {
                    $(`#request-${requestUsername}`).remove();
                    alert("Friend request rejected.");
                } else {
                    alert(response.result);
                }
            },
            error: function() {
                alert("Error processing request.");
            }
        });
    }

    window.addEventListener('beforeunload', function(event) {
        if (sessionStorage.getItem('loggedIn')) {
            const username = "{{ username|escape }}";
            const data = new FormData();
            data.append('username', username);
    
            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/logout', false);
            xhr.send(data);
            
            sessionStorage.removeItem('loggedIn');
        }
    });
    
    function showGuide() {
        alert("Welcome to ChatConnect! This page allows you to navigate through various features like chatting with friends, viewing public posts, and managing security settings. The top navigation bar includes tabs for Home, Chat With Friends, Public Posts, Security, and Guide. Your username and a logout button are displayed at the top right. The left side shows your Friend Requests and Friends List, where you can manage your friend connections. The center of the page lists articles with their titles and authors. Click on an article to view more details. Use the input boxes and buttons to join chat rooms, send messages, and add friends. Enjoy your time on ChatConnect!");
    }

    function changeRole(username) {
        let newRole = document.getElementById(`role-select-${username}`).value;
        let sessionKey = "{{ sessionKey }}";

        $.ajax({
            url: "/change_role",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({ targetUser: username, newRole: newRole, sessionKey: sessionKey }),
            success: function(response) {
                alert(response.message);
            },
            error: function(xhr, status, error) {
                alert("Error changing role: " + xhr.responseText);
            }
        });
    }

</script>
{% endblock %}