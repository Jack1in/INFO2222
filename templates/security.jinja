{% extends 'base.jinja' %}

{% block content %}
<style>
    body {
        font-family: Arial, sans-serif;
    }

    .tabs {
        margin-top: 20px;
        display: flex;
        justify-content: center; 
        gap: 1px;
    }

    .tabs button {
        padding: 15px 30px; 
        font-size: 18px; 
        background-color: #4c8bf5; 
        color: white; 
        border: none;
        border-radius: 0; 
        cursor: pointer;
        flex: 1;
    }

    .tabs button + button {
        border-left: 1px solid white; 
    }


    .username {
        font-size: 24px;
        font-weight: bold;
        margin-top: 20px;
    }

    .reset-container {
        margin-top: 40px;
    }

    .reset-container button {
        margin-top: 10px;
    }
</style>

<nav>
    <button onclick="window.location.href='{{ url_for('home', username=request.args.get('username'), sessionKey=request.args.get('sessionKey'), role=request.args.get('role')) }}'">Back to Home page</button>
</nav>

<body>
    <ol style="float: right">
        <li style="display:inline-block">Username: {{ username|escape }}</li>
        <li style="display:inline-block"><button onclick="logout()">Logout</button></li>
    </ol>
    <div class="tabs">
        <button onclick="window.location.href='{{ url_for('home', username=request.args.get('username'), sessionKey=request.args.get('sessionKey'), role=request.args.get('role')) }}'">Home</button>
        <button onclick="window.location.href='{{ url_for('chat', username=username, sessionKey=sessionKey) }}'">Chat With Friends</button>
        <button onclick="window.location.href='{{ url_for('knowledge_repository', username=username, sessionKey=sessionKey) }}'">Pulic Posts</button>
        <button style="background-color: #a2bff0;">Security</button>
        <button onclick="showGuide()">Guide</button>
    </div>

    <!-- User's name -->
    <div class="username">{{ username }}</div>

    <!-- Password reset section -->
    <div class="reset-container">
        <button onclick="resetPassword()">Reset Password</button>
        <input id="new_password" type="password" placeholder="New password">
        <p>More options available in future</p>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/crypto-js/crypto-js.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/node-forge/dist/forge.min.js"></script>
    <script>
        async function resetPassword() {
            const username = "{{ username|escape }}";
            let sessionKey = sessionStorage.getItem('sessionKey');
            const newPassword = document.getElementById('new_password').value;
            if (newPassword.length < 4) {
                alert("Password must be at least 4 characters long.");
                return;
            }
            const hashedPassword = CryptoJS.SHA256(newPassword).toString();
            // Use PBKDF2 to generate a deterministic "seed" from the password
            const salt = username; // Using the username as the salt
            const key = forge.pkcs5.pbkdf2(newPassword, salt, 1000, 16);

            // Convert the key to a hex string and use it as the seed for PRNG
            const seed = forge.util.bytesToHex(key);

            // Initialize PRNG with the seed
            const prng = forge.random.createInstance();
            prng.seedFileSync = function(needed) {
                return forge.util.hexToBytes(seed);
            };

            // Generate key pair using the seeded PRNG
            const keypair = forge.pki.rsa.generateKeyPair({bits: 2048, prng: prng});

            // Convert keys to PEM format
            const publicKeyPem = forge.pki.publicKeyToPem(keypair.publicKey);
            const privateKeyPem = forge.pki.privateKeyToPem(keypair.privateKey);

            // Store keys in localStorage with username as part of the key
            localStorage.setItem(username + "_password", newPassword);
            localStorage.setItem(username + "_publicKey", publicKeyPem);
            localStorage.setItem(username + "_privateKey", privateKeyPem);

            try {
                const response = await fetch("/reset_password", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        username: username,
                        new_password: hashedPassword,
                        publicKey: publicKeyPem,
                        sessionKey: sessionKey
                    })
                });

                if (response.ok) {
                    alert('Password reset successful.');
                    // Redirect to login page
                    logout();
                } else {
                    alert('Password reset failed.');
                }
            } catch (error) {
                console.error('Error resetting password:', error);
                alert('Password reset failed.');
            }
        }
        function logout() {
            const username = "{{ username|escape }}";
            const data = { username: username };
            
            fetch('/logout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            }).then(response => {
                if (response.ok) {
                    Cookies.remove("username");
                    Cookies.remove("room_id");
                    sessionStorage.removeItem('sessionKey');
                    window.location.href = "{{ url_for('login') }}";
                } else {
                    alert('Logout failed');
                }
            }).catch(error => {
                console.error('Error:', error);
                alert('Logout failed');
            });
        }
    
    function showGuide() {
        alert("You can reset your password here. More security options will be available in the future.");
    }
    </script>
</body>
{% endblock %}
