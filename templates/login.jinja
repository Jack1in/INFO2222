{% extends 'base.jinja' %}

{% block content %} 
    <h1>Login</h1>
    <p>Username</p>
    <input id="username"/>
    <p>Password</p>
    <input id="password" type="password"/>
    <button onclick="login()">Login</button>

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/node-forge/dist/forge.min.js"></script>

    <script>
        // Utility function to check if a URL is valid for redirection
        function isValidURL(string) {
            return string.length > 0 && string.startsWith("/");
        }

        // Function to handle user login
        async function login() {
            const username = $("#username").val();
            const password = $("#password").val();

            // Check if the password is at least 4 characters long
            if (password.length < 4) {
                alert("Password must be at least 4 characters long.");
                return;
            }

            let loginURL = "{{ url_for('login_user') }}";

            try {
                let res = await axios.post(loginURL, {
                    username: username,
                    password: password
                });

                if (!isValidURL(res.data)) {
                    alert(res.data);
                    return;
                }

                // The server validated the user's credentials successfully
                // Now generate the key pair based on the username and password
                generateKeysAndStore(username, password);

                // Redirect to the URL provided by the server
                window.open(res.data, "_self");
            } catch (error) {
                console.error("Error during login", error);
                alert("An error occurred during login. Please try again.");
            }
        }

        // Function to generate keys and store them in local storage
        async function generateKeysAndStore(username, password) {
            // Use PBKDF2 to generate a deterministic "seed" from the password
            const salt = username; // Using the username as the salt
            const key = forge.pkcs5.pbkdf2(password, salt, 1000, 16);

            // Convert the key to a hex string and use it as the seed for PRNG
            const seed = forge.util.bytesToHex(key);

            // Initialize PRNG with the seed
            const prng = forge.random.createInstance();
            prng.seedFileSync = function(needed) {
                return forge.util.hexToBytes(seed);
            };

            // Generate key pair using the seeded PRNG
            const keypair = forge.pki.rsa.generateKeyPair({bits: 2048, prng: prng});

            // Convert keys to PEM format
            const publicKeyPem = forge.pki.publicKeyToPem(keypair.publicKey);
            const privateKeyPem = forge.pki.privateKeyToPem(keypair.privateKey);

            // Store keys in localStorage with username as part of the key
            localStorage.setItem(username+"_passowrd", password)
            localStorage.setItem(username + "_publicKey", publicKeyPem);
            localStorage.setItem(username + "_privateKey", privateKeyPem);
        }
    </script>
{% endblock %}
