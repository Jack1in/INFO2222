{% extends 'base.jinja' %}

{% block content %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign Up</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            font-family: Arial, sans-serif;
        }

        .signup-container {
            display: flex;
            width: 800px;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .info-section {
            width: 60%;
            padding-right: 20px;
        }

        .form-section {
            width: 40%;
            background-color: #f9f9f9;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        h1 {
            text-align: center;
            font-size: 24px;
        }

        h2 {
            font-size: 28px;
            margin-bottom: 10px;
            text-align: center;
        }

        p {
            margin: 10px 0;
            padding: 10px;
        }

        input {
            width: 90%;
            padding: 10px;
            margin: 5px 0 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .btn {
            width: 100%;
            padding: 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin-bottom: 10px;
        }

        .btn:hover {
            background-color: #45a049;
        }

        .guide {
            margin-top: 10px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="signup-container">
        <div class="info-section">
            <h2>The best way to communicate with your friends</h2>
            <p>Welcome to ChatConnect, the ultimate web chat application designed to enhance your online communication experience. Whether you're looking to connect with friends, participate in lively group discussions, or ensure your conversations are secure.</p>
            <div class="guide">
                <a href="#" onclick="showGuide()">See guide</a>
            </div>
        </div>
        <div class="form-section">
            <h1>Sign Up</h1>
            <p>Your new account name</p>
            <input id="username" />
            <p>Pick a password (4-20 characters)</p>
            <input id="password" type="password" />
            <p>Admin Code (Optional)</p>
            <input id="adminCode" />
            <button class="btn" onclick="signup()">Sign Up</button>
            <button class="btn" onclick="login()">Click here to login in</button>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/node-forge/dist/forge.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/crypto-js/crypto-js.js"></script>
    <script>
        // Utility function to check if a URL is valid for redirection
        function isValidURL(string) {
            return string.startsWith("/");
        }

        // Function to handle user sign up
        async function signup() {
            try {
                const username = document.getElementById("username").value;
                const password = document.getElementById("password").value;
                const adminCode = document.getElementById("adminCode").value;
                console.log(adminCode);
                if (password.length < 4) {
                    alert("Password must be at least 4 characters long.");
                    return;
                }
                if (username.length < 4 || username.length > 20) {
                    alert("Abnormal username length. Please use between 4 and 20 characters.");
                    return;
                }
                const hashedPassword = CryptoJS.SHA256(password).toString();

                // Use PBKDF2 to generate a deterministic "seed" from the password
                const salt = username; // Using the username as the salt
                const key = forge.pkcs5.pbkdf2(password, salt, 1000, 16);

                // Convert the key to a hex string and use it as the seed for PRNG
                const seed = forge.util.bytesToHex(key);

                // Initialize PRNG with the seed
                const prng = forge.random.createInstance();
                prng.seedFileSync = function(needed) {
                    return forge.util.hexToBytes(seed);
                };

                // Generate key pair using the seeded PRNG
                const keypair = forge.pki.rsa.generateKeyPair({bits: 2048, prng: prng});

                // Convert keys to PEM format
                const publicKeyPem = forge.pki.publicKeyToPem(keypair.publicKey);
                const privateKeyPem = forge.pki.privateKeyToPem(keypair.privateKey);

                // Store keys in localStorage with username as part of the key
                localStorage.setItem(username + "_password", password);
                localStorage.setItem(username + "_publicKey", publicKeyPem);
                localStorage.setItem(username + "_privateKey", privateKeyPem);

                // Send the public key to the server with the username and password
                const res = await axios.post("{{ url_for('signup_user') }}", {
                    username: username,
                    password: hashedPassword,
                    publicKey: publicKeyPem,
                    adminCode: adminCode
                });

                if (!isValidURL(res.data)) {
                    alert(res.data); // Display error message from server
                    return;
                }

                // Redirect to the given URL
                window.location.href = res.data;
            } catch (error) {
                console.error("Error during signup", error);
                alert("An error occurred during signup. Please try again.");
            }
        }

        // Function to handle user login (dummy function for demonstration)
        function login() {
            // get to the url for login
            window.location.href = "{{ url_for('login') }}";
        }

        // Function to show guide (dummy function for demonstration)
        function showGuide() {
            alert("Guide will be shown here.");
        }
    </script>
</body>
</html>
{% endblock %}
